
Crear usuario administrador 
Abre tu terminal en la ra√≠z del proyecto y ejecuta:

python

luego pega todo este codigo 

from app.db.config import SessionLocal
from app.db.models import User
from werkzeug.security import generate_password_hash
import os
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.fernet import Fernet
import datetime

# 1. Configuraci√≥n de la base de datos
db = SessionLocal()

# 2. Generar claves p√∫blica y privada
key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
private_key_bytes = key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()
)
public_key_bytes = key.public_key().public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)

# 3. Cargar claves para cifrado
signature_secret = os.getenv("SIGNATURE_SECRET_KEY")
fernet_secret = os.getenv("FERNET_KEY")

if not signature_secret or not fernet_secret:
    raise Exception("Las claves SIGNATURE_SECRET_KEY y FERNET_KEY no est√°n definidas en el .env.")

fernet_private_key = Fernet(signature_secret.encode())
fernet_name = Fernet(fernet_secret.encode())

# 4. Cifrar la clave privada y los nombres
encrypted_private_key = fernet_private_key.encrypt(private_key_bytes)
encrypted_first_name = fernet_name.encrypt("Admin".encode())
encrypted_last_name = fernet_name.encrypt("User".encode())

# 5. Crear el usuario administrador
admin_user = User(
    email="m5954852@gmail.com",
    password_hash=generate_password_hash("Admin123!"),
    first_name=encrypted_first_name,
    last_name=encrypted_last_name,
    role="admin",
    is_active=True,
    can_upload=True,
    public_key=public_key_bytes,
    encrypted_private_key=encrypted_private_key,
    created_at=datetime.datetime.utcnow()
)

db.add(admin_user)
db.commit()
db.close()

print("‚úÖ Usuario administrador creado exitosamente.")


----

dale enter y luego pon exit() para salir 
-----------------------------------------------
http://localhost:5000/register

{
  "email": "solisedison@outlook.com",
  "password": "Admin1234567@",
  "first_name": "Juan",
  "last_name": "P√©rez"

}


-----------------------------------------------------------

Login 

http://localhost:5000/auth/two-factor/request-2fa


{
  "email": "solisedison@outlook.com",
  "password": "Admin1234567@"
}


{
  "email": "m5954852@gmail.com",
  "password": "Admin123!"
}
-----------------------------------------------------------

Dar click al enlace del correo y te redirijira a una pagina que tiene el token en la url 
ejemplo : 
http://tu-frontend.com/verify-success?session_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjo0LCJlbWFpbCI6Im01OTU0ODUyQGdtYWlsLmNvbSIsInJvbGUiOiJhZG1pbiIsImV4cCI6MTc0Njg2MDE3NX0.mRDMA6Lib_JNFu-l-ZXFymv7HaO4PEWmePaFMqobkx8

ahi se encuentra el token tratar de obtenerlo desde la url y alamacenarlo 
-----------------------

Adminitrador 

Obtener todos los usuarios :

http://localhost:5000/auth/admin/users

en Header poner Authorization: Bearer token 

----------------------------------------------------------------

Actualizar usuarios :


http://localhost:5000/auth/admin/update-user

{
   "id": 2,
    "role": "user",
    "is_active": true,
    "can_upload": true
}

--------------------------------------------------------------------------

Subir Archivo

URL: http://localhost:5000/files/

Method: POST

Headers:

Authorization: Bearer <session_token>

Body (form-data):

| Key         | Type | Value                                                                  |
| ----------- | ---- | ---------------------------------------------------------------------- |
| `file`      | File | üìÅ Selecciona el archivo **YA CIFRADO por el frontend**                |
| `file_hash` | Text | üßÆ El **hash SHA-256 del archivo original** (antes del cifrado)        |
| `signature` | Text | ‚úçÔ∏è  La **firma digital** (en formato hexadecimal) del archivo original |


---------------------------------------------------------------
Descargar Archivo
URL: http://localhost:5000/files/<file_id>

se obtendra adicioonal del archivo este header Un header adicional:  X-File-Protection-Password: 3xTj82Kp!
Esa es la contrase√±a generada por el backend, que tambi√©n fue enviada por correo.



Method: GET

Headers:

Authorization: Bearer <session_token>

--------------------

Listar Archivos
URL: http://localhost:5000/files/?page=1&per_page=10

Method: GET

Headers:

Authorization: Bearer <session_token>

{
  "total": 2,
  "page": 1,
  "per_page": 10,
  "files": [
    {
      "file_id": 1,
      "file_name": "documento1.pdf",
      "user_id": 5,
      "created_at": "2025-05-11T10:00:00",
      "access_type": "own",
      "permission_type": "full",
      "can_view": true,
      "can_download": true
    },
    {
      "file_id": 2,
      "file_name": "informe_compartido.docx",
      "user_id": 8,
      "created_at": "2025-05-10T15:30:00",
      "access_type": "shared",
      "permission_type": "view",
      "can_view": true,
      "can_download": false
    }
  ]
}


--------------------------------------
Eliminar Archivo
URL: http://localhost:5000/files/<file_id>

Method: DELETE

Headers:

Authorization: Bearer <session_token>

-----------------------------------------------------------

 Compartir Archivo con Otro Usuario

 URL: http://localhost:5000/files/<file_id>/share

Method: POST

Headers:

Authorization: Bearer <session_token>

Body (JSON):

{
    "target_user_id": 5,
    "permission_type": "download" puede ser view o both 
}

-------------------------------------------------------------------

Actualizar Archivo
URL: http://localhost:5000/files/<file_id>

Method: PUT

Headers:

Authorization: Bearer <session_token>

Body (form-data):

file: (Nuevo archivo, opcional)

file_name: (Nuevo nombre, opcional)

------------------------------------------
Consultar Perfil del Usuario
URL: http://localhost:5000/users/profile

M√©todo: GET

Headers:

Authorization: Bearer <session_token>

üîπ ¬øQu√© devuelve?

{
    "email": "user@example.com",
    "first_name": "John",
    "last_name": "Doe",
    "role": "user",
    "is_active": true,
    "can_upload": false
}

--------------------------------------

Actualizar Perfil del Usuario
URL: http://localhost:5000/users/profile

M√©todo: PUT

Headers:

Authorization: Bearer <session_token>

Content-Type: application/json

Body (JSON):
{
    "first_name": "Jane",
    "last_name": "Smith",
    "email": "new_email@example.com"
}

-----------------------------------------

api cerrar sesion :

POST http://localhost:5000/auth/two-factor/logout

Authorization: Bearer <TU_TOKEN_JWT>

-----------------------------------------------------

api editar permisos de archivos : 

POST http://localhost:5000/files/<file_id>/permissions
Authorization	Bearer <tu_token>

Body (JSON):

{
    "target_user_id": 5,
    "permission_type": "both"  // view | download | both | none
}

------------------------------------------------------------------
Obtener datos de descargas 

M√©todo: GET http://localhost:5000/files/10/download-history
Authorization: Bearer <TOKEN>

asi se obtiene la infromacion 

{
    "file_id": 10,
    "history": [
        {
            "user_id": 5,
            "email": "juan@example.com",
            "first_name": "Juan",
            "last_name": "P√©rez",
            "download_count": 3,
            "last_download": "2025-05-11T23:15:00"
        },
        {
            "user_id": 8,
            "email": "ana@example.com",
            "first_name": "Ana",
            "last_name": "Garc√≠a",
            "download_count": 1,
            "last_download": "2025-05-10T18:22:00"
        }
    ]
}

-----------------------------

Ver archivo 

http://localhost:5000/files/id del archivo/view

| Authorization | Bearer TU_TOKEN_JWT_AQUI |



---------------------------------------

PUT http://localhost:5000/files/<file_id>/permissions

Authorization: Bearer <tu_token>
Content-Type: application/json

{
  "target_user_id": 5,
  "permission_type": "both"  // Opciones: view | download | both | none
}
{
  "message": "Permiso actualizado a 'both' correctamente."
}

--------------------------------------------------------------

GET /files/<file_id>/permissions/users

Authorization	Bearer <tu_token_jwt>
 Ejemplo de Respuesta
{
  "file_id": 12,
  "users": [
    {
      "user_id": 2,
      "email": "ana@example.com",
      "first_name": "Ana",
      "last_name": "L√≥pez",
      "permission_type": "download",
      "total_downloads": 3,
      "last_download_time": "2025-05-20T10:45:00",
      "last_downloaded_file_name": "documento_2025.pdf"
    },
    {
      "user_id": 3,
      "email": "juan@example.com",
      "first_name": "Juan",
      "last_name": "P√©rez",
      "permission_type": "none",
      "total_downloads": 0,
      "last_download_time": null,
      "last_downloaded_file_name": null
    }
  ]
}



------------------------------------------------
Auditoria 
ojo que no necesariamente se tiene que enviar una fech asi nos e envia una fech atrae todo 

si no se envia el id de usuario trae de todos los usuarios 
---------------------------------------------------------------------------------
üì• Ver Historial de Descargas
http://localhost:5000/audit/downloads?user_id=5&start_date=2025-05-01&end_date=2025-05-20
Headers:
Authorization: Bearer <tu_token_JWT>
{
  "logs": [
    "[2025-05-11T10:00:00] Usuario juan@example.com descarg√≥ archivo 12 desde IP 192.168.1.10"
  ],
  "data": [
    {
      "id": 1,
      "user_id": 5,
      "email": "juan@example.com",
      "file_id": 12,
      "download_time": "2025-05-11T10:00:00",
      "ip_address": "192.168.1.10",
      "user_agent": "Mozilla/5.0"
    }
  ]
}


------------------------------------------------------------------------

üëÅ Ver Auditor√≠a de Acciones en Archivos (update/delete)
GET http://localhost:5000/audit/file-actions?file_id=12

Headers:
Authorization: Bearer <tu_token_JWT>
{
  "logs": [
    "[2025-05-11T10:30:00] Usuario juan@example.com ejecut√≥ 'update' sobre archivo 12 desde IP 192.168.1.10 (Archivo actualizado. Nombre: documento_v2.pdf)",
    "[2025-05-12T12:00:00] Usuario juan@example.com ejecut√≥ 'delete' sobre archivo 12 desde IP 192.168.1.10 (Archivo eliminado. Nombre: documento_v2.pdf)"
  ],
  "data": [
    {
      "id": 1,
      "user_id": 5,
      "email": "juan@example.com",
      "file_id": 12,
      "action": "update",
      "timestamp": "2025-05-11T10:30:00",
      "ip_address": "192.168.1.10",
      "details": "Archivo actualizado. Nombre: documento_v2.pdf"
    }
  ]
}


------------------------------------------------------------------------------------

üõÇ Ver Permisos Otorgados
GET http://localhost:5000/audit/permissions?user_id=3

Authorization: Bearer <tu_token_JWT>
{
  "logs": [
    "[2025-05-10T15:00:00] Usuario ana@example.com recibi√≥ permiso 'download' sobre archivo 8"
  ],
  "data": [
    {
      "id": 1,
      "file_id": 8,
      "granted_user_id": 3,
      "email": "ana@example.com",
      "permission_type": "download",
      "granted_at": "2025-05-10T15:00:00"
    }
  ]
}

-----------------------------------------------------------------------------------------------
üë§ Ver Sesiones Activas

GET http://localhost:5000/audit/sessions?user_id=5

Authorization: Bearer <tu_token_JWT>

{
  "logs": [
    "[2025-05-20T14:32:10] Usuario juan@example.com activo desde IP 192.168.0.5 con agente Mozilla/5.0"
  ],
  "data": [
    {
      "id": "abc123",
      "user_id": 5,
      "email": "juan@example.com",
      "ip_address": "192.168.0.5",
      "user_agent": "Mozilla/5.0",
      "created_at": "2025-05-20T13:00:00",
      "last_activity_at": "2025-05-20T14:32:10"
    }
  ]
}


--------------------------------------------------------------------------------
üóÇ Ver Archivos Subidos
GET http://localhost:5000/audit/files?user_id=5

Authorization: Bearer <tu_token_JWT>
{
  "logs": [
    "[2025-05-10T09:30:00] Usuario juan@example.com subi√≥ archivo 'reporte_final.pdf'"
  ],
  "data": [
    {
      "id": 10,
      "user_id": 5,
      "email": "juan@example.com",
      "file_name": "reporte_final.pdf",
      "created_at": "2025-05-10T09:30:00"
    }
  ]
}


---------------------------------------------------
üïµÔ∏è Ver Intentos de Login

GET http://localhost:5000/audit/logins?email=admin@example.com

Authorization: Bearer <tu_token_JWT>
{
  "logs": [
    "[2025-05-19T10:00:00] Intento de login con email admin@example.com"
  ],
  "data": [
    {
      "id": 1,
      "email": "admin@example.com",
      "attempt_time": "2025-05-19T10:00:00"
    }
  ]
}




------------------------------------------------------------------------------

primero el back envia el archivo y recibe el archivo protegido

POST http://localhost:5000/files/protect-dw-pdf
Headers:
Authorization: Bearer <tu_token_JWT>
Content-Type: multipart/form-data
Body (form-data):

Key	Type	Value
file	File	üìÅ El archivo PDF original (sin proteger)

este enpoint retorna esto el archivo protegido en base 64 y la contrase√±a y 
el nombre del archivo para que el front end recontruya el archivo y lo cifre con aes
{
    "protected_pdf": "JVBERi0xLjMKJcTl8uXrp/Og0MTGCjQgMCBvYmoKPDwKL0xlbmd0aCAxMTYK... (base64)",
    "pdf_password": "3xTj82Kp!",
    "file_name": "documento.pdf"
}

------------------------------------------------------------------------
luego  antes de que el front cifre con aes tiene que calcular el hash , la firma y ahi si cifralo
y enviarme la ocntrase√±a de antes le envie el hash, la firma y el archvio protegido cifrado 

POST http://localhost:5000/files/
Headers:
Authorization: Bearer <session_token>
Content-Type: multipart/form-data
Body (form-data):


| Key            | Type | Value                                                                   |
| -------------- | ---- | ----------------------------------------------------------------------- |
| `file`         | File | üìÅ PDF **protegido** (proveniente del endpoint `/files/protect-dw-pdf`) |
| `file_hash`    | Text | üßÆ Hash SHA-256 del archivo PDF protegido String hexadecimal SHA-256 del PDF protegido (64 caracteres)     |
| `signature`    | Text | ‚úçÔ∏è Firma digital en formato HEX del `file_hash`                         |
| `pdf_password` | Text | üîê Contrase√±a generada en `/files/protect-dw-pdf` y enviada al usuario  |

la respuesta que envia el servidor es : 
{
    "message": "Archivo doblemente cifrado y almacenado correctamente.",
    "file_id": 123
}

-----------------------------------------------------------------

Descargar Archivo

GET http://localhost:5000/files/<file_id>

envia el archivo quitado una capa de cifrado y oibtiene la contrase√±a alamcenada en la bd y lo envia al correo 